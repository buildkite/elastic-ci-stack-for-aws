#!/bin/bash

set -euo pipefail

# Check if we should skip termination due to agent failure
# Only terminate on clean exit (code 0) or when systemd has given up on restarts
if [[ ${EXIT_CODE:-0} != 0 ]]; then
  # Check if systemd has hit restart limits
  if systemctl is-failed buildkite-agent.service --quiet; then
    failure_reason=$(systemctl show -p Result buildkite-agent.service --value 2>/dev/null || echo "unknown")
    if [[ "$failure_reason" == "start-limit-hit" ]]; then
      echo "systemd restart limit exceeded (exit code: $EXIT_CODE), proceeding with instance termination" | logger
    else
      echo "Agent exited with non-zero code ($EXIT_CODE) but systemd will retry, skipping termination" | logger
      exit 0
    fi
  else
    echo "Agent exited with non-zero code ($EXIT_CODE), allowing systemd restart" | logger
    exit 0
  fi
else
  echo "Agent exited normally (exit code: 0), proceeding with instance termination" | logger
fi

terminate() {
  aws autoscaling terminate-instance-in-auto-scaling-group \
    --region "$1" \
    --instance-id "$2" \
    --should-decrement-desired-capacity
}

mark_as_unhealthy() {
  aws autoscaling set-instance-health \
    --region "$1" \
    --instance-id "$2" \
    --health-status Unhealthy
}

echo "sleeping for 10 seconds before terminating instance to allow agent logs to drain to cloudwatch..."
sleep 10

token=$(
  curl \
    --fail --silent --show-error \
    -X PUT \
    -H "X-aws-ec2-metadata-token-ttl-seconds: 60" \
    --location "http://169.254.169.254/latest/api/token"
)
instance_id=$(
  curl \
    --fail --silent --show-error \
    -H "X-aws-ec2-metadata-token: $token" \
    --location "http://169.254.169.254/latest/meta-data/instance-id"
)
region=$(
  curl \
    --fail --silent --show-error \
    -H "X-aws-ec2-metadata-token: $token" \
    --location "http://169.254.169.254/latest/meta-data/placement/region"
)

echo "requesting instance termination..."
if [[ $BUILDKITE_TERMINATE_INSTANCE_AFTER_JOB == "true" ]]; then
  # If the ASG is at the min capacity, the call to terminate-instance-in-autoscaling-group
  # In this case, we mark the instance as unhealthy, then the ASG will spin up a new instance
  # to replace it.
  terminate "$region" "$instance_id" || mark_as_unhealthy "$region" "$instance_id"
else
  # If we're not in terminate-after-job mode, then it's fine for this to fail. Systemd will restart
  # the agent and it'll be as if the instance never got shut down.
  terminate "$region" "$instance_id"
fi
